import { useRouter } from "next/router";
import type { NextPage } from 'next';
import Head from 'next/head';
//import Image from 'next/image';
import { useContext, useEffect, useState } from 'react';
import styles from '../../styles/Home.module.css';
import { HomeIcon, PersonIcon, PlusCircleIcon, PlusIcon, SearchIcon, SignInIcon } from '@primer/octicons-react';
import NavbarButton from '../../components/NavbarButton';
import ChatMessage from '../../components/ChatMessage';
import { SocketContext } from '../../context/SocketContext';
import PlayerComponent from '../../components/PlayerComponent';

const formatMessage = (str: string) => {
  const formattedString = str.replace(/\s{2,}/g, ' ').trim();
  if (formattedString === null || formattedString.match(/^ *$/) !== null) return false;
  return formattedString;
}

const Room: NextPage = () => {
  const router = useRouter();
  const {code} = router.query;
  const {socket, changeRoom} = useContext(SocketContext);
  const [socketConnected, setSocketConnected] = useState(false);
  const [messages, setMessages] = useState([] as any);
  const [message, setMessage] = useState('');
  const [url, setUrl] = useState('');
  const [roomPassword, setRoomPassword] = useState('');
  const [connectedToRoom, setConnectedToRoom] = useState(false);
  const [codeAvailable, setCodeAvailable] = useState(false);

  // checks to see if socket successfully connected to server
  useEffect(() => {
    setSocketConnected(socket.connected);
    
    socket.on('connect', () => {
      setSocketConnected(socket.connected);
    });

    socket.on('join-status', (data: boolean) => {
      setConnectedToRoom(data);
    });

    socket.on('disconnect', () => {
      setSocketConnected(() => (socket.connected));
    });
  }, [socket?.connected]);

  useEffect(() => {
    if (!code) return;

    setCodeAvailable(true);
    //handleRoomConnection();
  }, [code]);

  useEffect(() => {
    if (!socketConnected || !codeAvailable) return;

    handleRoomConnection();
  }, [socketConnected, codeAvailable]);

  // now this is fun
  // checks if room code is the correct length, then just emits join to the back-end to that room
  const handleRoomConnection = () => {
    const correctedRoomCode = `${code}`.split(" ").join("").trim();
    //console.log(correctedRoomCode.length >= 5, room.length);
    if (correctedRoomCode.length >= 5 && !/[^a-zA-Z]/.test(correctedRoomCode)) {
      if (!code) return;

      socket.emit('join', {room: correctedRoomCode, password: roomPassword});
    } else {
      alert('Room code is less than the accepted!');
    }
  }

  const handleSongRequest = () => {
    if (socketConnected) {
      socket.emit('request-song', url);
    }
  }

  const handleSendMessage = () => {
    const formattedMessage = formatMessage(message);
    if (formattedMessage == false) return;
    socket.emit('send-message', {message: formattedMessage, room: code});
    setMessage('');
  }

  useEffect(() => {
    if (!connectedToRoom) return;

    socket.on('message', (data: any) => {
      setMessages((messages: any) => [...messages, data]);
    });
    
    changeRoom(code as string);
  }, [connectedToRoom])

  return (
    <div className={styles.container}>
      <Head>
        <title>{!code ? 'TuneTogether' : `TuneTogether - Room - ${code}`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.sidebar}>
        <button className={styles.sidebarButtonTop}>
          <HomeIcon />
        </button>

        <div className={styles.buttonsHandler}>
          <NavbarButton buttonName={"Add Music"}>
            <PlusIcon />
          </NavbarButton>
          <NavbarButton buttonName={"Search Rooms"}>
            <SearchIcon />
          </NavbarButton>
          <NavbarButton buttonName={"Enter room code"}>
            <SignInIcon />
          </NavbarButton>
          <NavbarButton buttonName={"Create new room"}>
            <PlusCircleIcon />
          </NavbarButton>
        </div>

        <button className={styles.sidebarButtonBottom}>
          <PersonIcon />
        </button>
      </div>

      <div className={styles.main}>
        hi
      </div>

      <div className={styles.chatRoom}>
        <div className={styles.MessagesHandler}>
          {messages.length > 0 ? messages.map((msg: any, i: number) => (
            <ChatMessage key={i} user={msg.user as string}>
              {msg.text}
            </ChatMessage>
          )).reverse() : ('Nada Al√©m de Galinhas!')}
        </div>
        <div className={styles.chatMessengerHandler}>
          <textarea onChange={(e) => setMessage(e.target.value)} value={message} onKeyDown={(event) => {if (event.key === 'Enter') {handleSendMessage(); event.preventDefault()}}} rows={3} name="" id="" />
          <button disabled={formatMessage(message) == false ? true : false} onClick={handleSendMessage}>Send</button>
        </div>
      </div>

      <div className='socketIODebugMenu'>
          {socket.connected && 'connected'}
          {socket.disconnected && 'disconnected'}

        <input type="text" onChange={ (e) => setUrl(e.target.value) } />
        <input type="button" value={`request song`} onClick={handleSongRequest} />
      </div>

      <PlayerComponent />
      
    </div>
  )
}

export default Room;